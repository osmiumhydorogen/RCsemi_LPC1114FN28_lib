/*
 * uartClass.cpp
 * ver. 0.2
 *  Created on: 2016/09/02
 *      Author: osmium
 */

#include <math.h>
#include <rcsemi_uart.hpp>
namespace RCsemi
{
	UARTPort& UARTPort::operator<<(const uint8_t byte)
	{
		while(!(port->LSR & (0x1 << 5)));
		port->THR = byte;
		return *this;
	}

	UARTPort& UARTPort::operator<<(const char* bytesInChar)
	{
		do
		{
			while(!(port->LSR & (0x1 << 5)));
			port->THR = *bytesInChar;
		}
		while(*(++bytesInChar));

		return *this;
	}

	UARTPort& UARTPort::operator >>(uint8_t& byte)
	{
		while(!(port->LSR & 0x01UL));
		byte=(port->RBR & 0xff);
		return *this;
	}

	UARTPort& UARTPort::operator >>(char* str)
	{
		char tmp , *pstr = str;
		do
		{
			while(!(port->LSR & 0x01UL));
			tmp = *pstr=(port->RBR & 0xff);
			++pstr;
		}
		while(tmp != 0x0D && tmp != 0x0A);
		*(pstr - 1) = 0;

		return *this;
	}

	UARTPort::UARTPort(LPC_UART_TypeDef* newPort)
	{
		port=newPort;
		LPC_SYSCON->SYSAHBCLKCTRL |= (0x01UL << 12);
		LPC_SYSCON->UARTCLKDIV     = 0x01UL;
	}

	int UARTPort::setBaud(int PCLK,int BR)
	{
		uint8_t MULVAL    = 1;
		uint8_t DIVADDVAL = 0;
		int tmp;
		int cnt;
		float FRest;
		float DLest;

		DLest = ((float)PCLK)/(16*BR);
		if((float)((int)DLest) == DLest)
		{
			MULVAL   = 1;
			DIVADDVAL= 0;
		}
		else
		{
			FRest=1.5;
			DLest=(int)(PCLK/(16*BR*FRest));
			FRest=PCLK/(16*BR*DLest);
			if(FRest > 1.9 || FRest < 1.1)
			{
				for(FRest=1.1;FRest > 1.9 || FRest < 1.1;FRest += 0.1)
				{
					if(FRest > 1.9) return -1;
					DLest=(int)(PCLK/(16*BR*FRest));
					FRest=PCLK/(16*BR*DLest);
				}
			}
			for(cnt=1;cnt<=15;cnt++)
			{
				tmp=((FRest-1)*cnt-((int)((FRest-1)*cnt)) < 0.5) ? ((int)((FRest-1)*cnt)):((int)((FRest-1)*cnt)+1);
				if(fabs((FRest-1)-(float)tmp/cnt) < (fabs((FRest-1)-(float)DIVADDVAL/MULVAL)))
				{
					DIVADDVAL=tmp;
					MULVAL=cnt;
				}

			}
		}


		port->LCR |= (0x1UL << 7);
		port->DLL  = 0xffUL & (int)DLest;
		port->DLM  = 0xffUL & (((int)DLest) >> 8);
		port->FDR &= ~0xffUL;
		port->FDR |= (MULVAL << 4) | (DIVADDVAL & 0x0fUL);
		port->LCR &= ~(0x1UL << 7);


		return 0;

	}

	void UARTPort::uchar2ascii(unsigned char inByte,char inAscii[2])
	{
		static char fourBit2asciiTable[] = "0123456789ABCDEF";
		inAscii[1] = fourBit2asciiTable[inByte & 0xf];
		inAscii[0] = fourBit2asciiTable[(inByte >> 4) & 0xf];
	}

	int UARTPort::ascii2uchar(unsigned char& inByte,char inAscii[2])
	{
		static unsigned char ascii2fourBitTable[] = {0,1,2,3,4,5,6,7,8,9,17,17,17,17,17,17,17,10,11,12,13,14,15};
		if(!ascii2fourBitTable[inAscii[2]-'0'] || !ascii2fourBitTable[inAscii[1]-'0'] || ascii2fourBitTable[inAscii[0]-'0'] >= 16 || ascii2fourBitTable[inAscii[1]-'0'] >= 16)
			return -1;
		inByte = (ascii2fourBitTable[inAscii[0]-'0']) | (ascii2fourBitTable[inAscii[1] - '0'] << 4);
		return 0;
	}



}


